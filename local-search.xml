<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux 配置LEMP环境</title>
    <link href="/2020/10/03/Linux-%E9%85%8D%E7%BD%AELEMP%E7%8E%AF%E5%A2%83/"/>
    <url>/2020/10/03/Linux-%E9%85%8D%E7%BD%AELEMP%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h3 id="一、安装环境"><a href="#一、安装环境" class="headerlink" title="一、安装环境"></a>一、安装环境</h3><h4 id="1-安装Nginx"><a href="#1-安装Nginx" class="headerlink" title="1.安装Nginx"></a>1.安装Nginx</h4><pre><code class="hljs sql">sudo apt <span class="hljs-keyword">update</span>sudo apt <span class="hljs-keyword">install</span> nginxsudo ufw <span class="hljs-keyword">allow</span> <span class="hljs-string">&#x27;Nginx HTTP&#x27;</span></code></pre><h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><p>sudo ufw status</p><p>浏览器输入ip地址或域名</p><h4 id="2-安装MySQL"><a href="#2-安装MySQL" class="headerlink" title="2.安装MySQL"></a>2.安装MySQL</h4><pre><code class="hljs sql">sudo apt <span class="hljs-keyword">install</span> mysql-<span class="hljs-keyword">server</span></code></pre><p>mysql -u root -p</p><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo mysql_secure_installation</span></code></pre><p>Please enter 0 = LOW, 1 = MEDIUM and 2 = STRONG: 1</p><p>y</p><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo mysql</span></code></pre><pre><code class="hljs mysql">SELECT user,authentication_string,plugin,host FROM mysql.user;</code></pre><p>![image-20200330153604061](/Users/gloriazhang/Library/Application Support/typora-user-images/image-20200330153604061.png)</p><p>此时root用户通过 auth_socket插件进行身份验证，以下将root用户改成通过密码进行身份验证</p><p>password改成自己刚改密码</p><pre><code class="hljs mysql">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;password&#39;;</code></pre><pre><code class="hljs mysql">FLUSH PRIVILEGES;</code></pre><pre><code class="hljs mysql">SELECT user,authentication_string,plugin,host FROM mysql.user;</code></pre><p>![image-20200330152909122](/Users/gloriazhang/Library/Application Support/typora-user-images/image-20200330152909122.png)</p><p>有以上输出，则可以退出mysql</p><pre><code class="hljs mysql">exit</code></pre><p><strong>Note</strong>此时 sudo mysql 无法继续访问mysql，我们可以通过以下命令登入：</p><pre><code class="hljs ebnf"><span class="hljs-attribute">mysql -u root -p</span></code></pre><h5 id="ERROR-1819-HY000"><a href="#ERROR-1819-HY000" class="headerlink" title="ERROR 1819(HY000)"></a>ERROR 1819(HY000)</h5><p>如果出现 ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</p><p>则</p><p><code>sudo mysql_secure_installation</code></p><p>改一个强度高的密码</p><p>密码强度最好一百以上</p><p>Estimated strength of the password: 100 </p><p>q继续上述命令验证</p><h4 id="3-安装PHP并配置Nginx组件"><a href="#3-安装PHP并配置Nginx组件" class="headerlink" title="3.安装PHP并配置Nginx组件"></a>3.安装PHP并配置Nginx组件</h4><pre><code class="hljs smali">sudo<span class="hljs-built_in"> add-apt-repository </span>universe</code></pre><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> php-fpm php-mysql</code></pre><p>到此LEMP必要的组件已经安装完毕，帮极啦！不过仍然要进行一些配置更改，以使Nginx使用PHP处理器来处理动态内容。</p><h3 id="二、配置环境"><a href="#二、配置环境" class="headerlink" title="二、配置环境"></a>二、配置环境</h3><p>新建的服务器配置文件，Example.com 即是，可自主命名。</p><pre><code class="hljs awk">sudo vi <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/sites-available/m</span>an.com</code></pre><p>如下</p><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;        <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;        <span class="hljs-attribute">root</span> /var/html;        <span class="hljs-attribute">index</span> index.php index.html index.htm index.nginx-debian.html;        <span class="hljs-attribute">server_name</span> man.com;        <span class="hljs-attribute">location</span> / &#123;                <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ =<span class="hljs-number">404</span>;        &#125;        <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ \.php$</span> &#123;                <span class="hljs-attribute">include</span> snippets/fastcgi-php.conf;                <span class="hljs-attribute">fastcgi_pass</span> unix:/var/run/php/php7.2-fpm.sock;        &#125;        <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ /\.ht</span> &#123;                <span class="hljs-attribute">deny</span> all;        &#125;&#125;</code></pre><pre><code class="hljs awk">sudo ln -s <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/sites-available/m</span>an.com <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/sites-enabled/</span></code></pre><pre><code class="hljs gradle">sudo unlink <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/sites-enabled/</span><span class="hljs-keyword">default</span></code></pre><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo nginx -t</span></code></pre><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo systemctl reload nginx</span></code></pre><h3 id="三、建一个PHP文件测试配置"><a href="#三、建一个PHP文件测试配置" class="headerlink" title="三、建一个PHP文件测试配置"></a>三、建一个PHP文件测试配置</h3><pre><code class="hljs awk">sudo nano <span class="hljs-regexp">/var/</span>html/info.php</code></pre><p>配置如下</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>phpinfo();</code></pre><pre><code class="hljs awk">http:<span class="hljs-regexp">//y</span>our_server_domain_or_IP/info.php</code></pre><p>wow！配置成功！</p><p>![image-20200330164401080](/Users/gloriazhang/Library/Application Support/typora-user-images/image-20200330164401080.png)</p><p>最后，我们最好删除测试文件，因为它实际上可以为未经授权的用户提供有关您的配置的一些提示，这些提示可能有助于他人尝试闯入。</p><pre><code class="hljs awk">sudo rm <span class="hljs-regexp">/var/</span>html/info.php</code></pre><h3 id="四、SSL证书配置"><a href="#四、SSL证书配置" class="headerlink" title="四、SSL证书配置"></a>四、SSL证书配置</h3><h4 id="1-需要准备"><a href="#1-需要准备" class="headerlink" title="1. 需要准备"></a>1. 需要准备</h4><p>   腾讯云证书，Nginx 服务，例： 1inc.cn</p><h4 id="2-证书安装"><a href="#2-证书安装" class="headerlink" title="2. 证书安装"></a>2. 证书安装</h4><h5 id="1）在-SSL-证书管理控制台-中下载并解压缩-www-domain-com-证书文件包到本地目录。"><a href="#1）在-SSL-证书管理控制台-中下载并解压缩-www-domain-com-证书文件包到本地目录。" class="headerlink" title="1）在 SSL 证书管理控制台 中下载并解压缩 www.domain.com 证书文件包到本地目录。"></a>1）在 <a href="https://console.cloud.tencent.com/ssl">SSL 证书管理控制台</a> 中下载并解压缩 <code>www.domain.com</code> 证书文件包到本地目录。</h5><p>解压缩后，可获得相关类型的证书文件。其中包含 Nginx 文件夹和 CSR 文件：</p><ul><li><strong>文件夹名称</strong>：Nginx</li><li>文件夹内容<ul><li><code>1_www.domain.com_bundle.crt</code> 证书文件</li><li><code>2_www.domain.com.key</code> 私钥文件</li></ul></li></ul><h5 id="2）使用文件传输工具例如-filezilla-将上面两个文件传到服务器上，移动到Nginx目录下"><a href="#2）使用文件传输工具例如-filezilla-将上面两个文件传到服务器上，移动到Nginx目录下" class="headerlink" title="2）使用文件传输工具例如 filezilla 将上面两个文件传到服务器上，移动到Nginx目录下"></a>2）使用文件传输工具例如 <a href="https://filezilla-project.org/download.php?platform=osx">filezilla</a> 将上面两个文件传到服务器上，移动到Nginx目录下</h5><h5 id="3）在-etc-nginx-sites-available-目录下新建一个配置文件"><a href="#3）在-etc-nginx-sites-available-目录下新建一个配置文件" class="headerlink" title="3）在 /etc/nginx/sites-available 目录下新建一个配置文件"></a>3）在 /etc/nginx/sites-available 目录下新建一个配置文件</h5><pre><code class="hljs awk">sudo vi <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/sites-available/</span><span class="hljs-number">1</span>inc.cn</code></pre><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;        <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span>;        <span class="hljs-attribute">ssl</span> <span class="hljs-literal">on</span>;        <span class="hljs-attribute">root</span> /var/html;        <span class="hljs-attribute">index</span> index.php index.html index.htm index.nginx-debian.html;        <span class="hljs-attribute">server_name</span> www.1inc.cn;        <span class="hljs-attribute">ssl_certificate</span> 1_www.1inc.cn_bundle.crt;         <span class="hljs-attribute">ssl_certificate_key</span> 2_www.1inc.cn.key;         <span class="hljs-attribute">location</span> / &#123;                <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ =<span class="hljs-number">404</span>;        &#125;        <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ \.php$</span> &#123;                <span class="hljs-attribute">include</span> snippets/fastcgi-php.conf;                <span class="hljs-attribute">fastcgi_pass</span> unix:/var/run/php/php7.2-fpm.sock;        &#125;        <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ /\.ht</span> &#123;                <span class="hljs-attribute">deny</span> all;        &#125;&#125;</code></pre><p>以下为官方配置文件，可参照更改</p><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;     <span class="hljs-comment">#SSL 访问端口号为 443</span>     <span class="hljs-attribute">ssl</span> <span class="hljs-literal">on</span>;      <span class="hljs-comment">#填写绑定证书的域名</span>     <span class="hljs-attribute">server_name</span> <span class="hljs-regexp">www.*</span>*<span class="hljs-regexp">*.cn</span>;      <span class="hljs-comment">#证书文件名称</span>     <span class="hljs-attribute">ssl_certificate</span> 1_www.1inc.cn_bundle.crt;      <span class="hljs-comment">#私钥文件名称</span>     <span class="hljs-attribute">ssl_certificate_key</span> 2_www.1inc.cn.key;      <span class="hljs-attribute">ssl_session_timeout</span> <span class="hljs-number">5m</span>;     <span class="hljs-comment">#请按照以下协议配置</span>     <span class="hljs-attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span>;      <span class="hljs-comment">#请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。</span>     <span class="hljs-attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;      <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;     <span class="hljs-attribute">location</span> / &#123;        <span class="hljs-comment">#网站主页路径。此路径仅供参考，具体请您按照实际目录操作。</span>         <span class="hljs-attribute">root</span> /var/html/<span class="hljs-regexp">www.*</span>*<span class="hljs-regexp">*.cn</span>;          <span class="hljs-attribute">index</span>  index.html index.htm;     &#125; &#125;</code></pre><h5 id="4）创建链接启动服务器"><a href="#4）创建链接启动服务器" class="headerlink" title="4）创建链接启动服务器"></a>4）创建链接启动服务器</h5><pre><code class="hljs awk">sudo ln -s <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/sites-available/</span><span class="hljs-number">1</span>inc.cn <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/sites-enabled/</span></code></pre><h5 id="5）然后，从-sites-enabled-目录中取消默认配置文件的链接："><a href="#5）然后，从-sites-enabled-目录中取消默认配置文件的链接：" class="headerlink" title="5）然后，从/ sites-enabled /目录中取消默认配置文件的链接："></a>5）然后，从/ sites-enabled /目录中取消默认配置文件的链接：</h5><pre><code class="hljs gradle">sudo unlink <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/sites-enabled/</span><span class="hljs-keyword">default</span></code></pre><p>#####6）检查配置文件，直到不出错</p><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo nginx -t</span></code></pre><p>7）最后，重新加载Nginx进行必要的更改</p><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo systemctl reload nginx</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS基础-实验楼</title>
    <link href="/2020/10/03/CSS%E5%9F%BA%E7%A1%80-%E5%AE%9E%E9%AA%8C%E6%A5%BC/"/>
    <url>/2020/10/03/CSS%E5%9F%BA%E7%A1%80-%E5%AE%9E%E9%AA%8C%E6%A5%BC/</url>
    
    <content type="html"><![CDATA[<h4 id="高级框操作"><a href="#高级框操作" class="headerlink" title="高级框操作"></a>高级框操作</h4><p>当你使用绝对的值设置了一个框的大小（如，固定像素的宽/高），允许的大小可能不适合放置内容，这种情况下内容会从盒子溢流。我们使用 overflow 属性来控制这种情况的发生。常用的值：</p><ul><li>auto:当内容过多的时候溢流的内容被隐藏，然后出现滚动条，让我们滚动查看所有的内容。</li><li>hidden: 当内容过多，溢流的内容被隐藏。</li><li>visible: 当内容过多，溢流的内容被显示在盒子的外边。</li></ul><h4 id="CSS-框类型"><a href="#CSS-框类型" class="headerlink" title="CSS 框类型"></a>CSS 框类型</h4><p>display 属性有很多的属性值。这里着重讲三个常见的 :block, inline, 和 inline-block。</p><ul><li>块级元素的特点：<ol><li>一个块级元素独占一行。</li><li>元素的高度、宽度、行高以及顶和底边距都可设置。</li><li>元素宽度在不设置的情况下，是它本身父容器的 100%（和父元素的宽度一致），除非设定一个宽度。</li><li>常见的块级元素：div、p、h1、form、ul和 li。</li></ol></li><li>行内元素的特点：<ol><li>和其他元素都在一行上。</li><li>元素的高度、宽度、行高及顶部和底部边距不可设置。</li><li>元素的宽度就是它包含的文字或图片的宽度，不可改变。</li><li>常见的行内元素：a、span、br、i、em&gt;、strong、label。</li></ol></li><li>行内块元素特点：同时具备内联元素、块状元素的特点。常见行内块元素：img、input。</li></ul><h4 id="Web-字体"><a href="#Web-字体" class="headerlink" title="Web 字体"></a>Web 字体</h4><p>首先我们通过 @font-face 指定要下载的字体文件。</p><pre><code class="hljs css"><span class="hljs-keyword">@font-face</span> &#123;      <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;Bitstream Vera Serif Bold&quot;</span>;      <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;http://developer.mozilla.org/@api/deki/files/2934/=VeraSeBd.ttf&quot;</span>);    &#125;</code></pre><p>然后使用 @font-face 中指定的字体种类名称来将你的定制字体应用到你需要的地方，比如说：</p><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123; <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;Bitstream Vera Serif Bold&quot;</span>, serif &#125;</code></pre><h4 id="flex-布局"><a href="#flex-布局" class="headerlink" title="flex 布局"></a>flex 布局</h4><p> flex 模型： <img src="https://mdn.mozillademos.org/files/3739/flex_terms.png/vm" alt="img"></p><h5 id="容器的属性："><a href="#容器的属性：" class="headerlink" title="容器的属性："></a>容器的属性：</h5><ul><li>flex-direction 属性：设置主轴的方向（也就是项目的排列方向）。它的取值有：<ul><li>row（默认值）：主轴为水平方向，起点在左端。</li><li>row-reverse：主轴为水平方向，起点在右端。</li><li>column：主轴为垂直方向，起点在上沿。</li><li>column-reverse：主轴为垂直方向，起点在下沿。</li></ul></li><li>flex-wrap属性：默认情况下，项目都排在一条线（轴线）上。flex-wrap 属性定义如果一条轴线排不下，如何换行。它的取值有：<ul><li>nowrap（默认）：不换行。</li><li>wrap：换行，第一行在上方。</li><li>wrap-reverse：换行，第一行在下方。</li></ul></li><li>flex-flow 属性是 flex-direction 属性和 flex-wrap 属性的简写形式，默认值为 row nowrap。</li><li>justify-content 属性定义了项目在主轴上的对齐方式。它的取值有：<ul><li>flex-start：使所有 flex 项都位于主轴的开始处。</li><li>flex-end：使所有 flex 项到主轴的结尾处。</li><li>center：使 flex 项在主轴居中。</li><li>space-between：使 flex 项两端对齐，项目之间的间隔都相等。</li><li>space-around：使每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul></li><li>align-items 属性定义项目在交叉轴上如何对齐。它可能取5个值，具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下：<ul><li>flex-start：交叉轴的起点对齐。</li><li>flex-end：交叉轴的终点对齐。</li><li>center：交叉轴的中点对齐。</li><li>baseline: 项目的第一行文字的基线对齐。</li><li>stretch（默认值）：如果项目未设置高度或设为 auto，将占满整个容器的高度。</li></ul></li><li>align-content 属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。它的可能取值为：<ul><li>flex-start：与交叉轴的起点对齐。</li><li>flex-end：与交叉轴的终点对齐。</li><li>center：与交叉轴的中点对齐。</li><li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li>stretch（默认值）：轴线占满整个交叉轴。</li></ul></li></ul><h5 id="项目的属性："><a href="#项目的属性：" class="headerlink" title="项目的属性："></a>项目的属性：</h5><ul><li>order 属性定义项目的排列顺序。数值越小，排列越靠前，默认为 0。</li><li>flex-grow 属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。如果所有项目的 flex-grow 属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的 flex-grow 属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍。</li><li>flex-shrink 属性定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。如果所有项目的 flex-shrink 属性都为 1，当空间不足时，都将等比例缩小。如果一个项目的 flex-shrink 属性为 0，其他项目都为 1，则空间不足时，前者不缩小。负值对该属性无效。</li><li>flex-basis 属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为 auto，即项目的本来大小。它可以设为跟 width 或 height 属性一样的值（比如 350 px），则项目将占据固定空间。</li><li>flex 属性是 flex-grow, flex-shrink 和 flex-basis 的简写，默认值为 0 1 auto。后两个属性可选。该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</li><li>align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。该属性可能取 6 个值，除了 auto，其他都与 align-items 属性完全一致。</li></ul><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><ul><li><p>background-image 还有一组可用的值：颜色渐变。通过 linear-gradient() 函数设置，函数至少需要用逗号分隔的三个参数——背景中渐变的方向，开始的颜色和结尾的颜色。例如：</p></li><li><style>  .box{            width: 100px;            height: 100px;            background-image:     linear-gradient(to bottom, red, blue);            }</style></li></ul><h4 id="轮廓"><a href="#轮廓" class="headerlink" title="轮廓"></a>轮廓</h4><ul><li>outline-color 设置轮廓的颜色。取值和其余颜色的取值一样。</li><li>outline-style 设置轮廓的样式。取值如下：</li></ul><ul><li>outline-width 设置轮廓的宽度。它的值有：<ul><li>thin 规定细轮廓。</li><li>medium 默认取值规定中等的轮廓。</li><li>thick 规定粗的轮廓。</li><li>length 允许你自定义轮廓粗细的值。</li><li>inherit 规定应该从父元素继承轮廓宽度的设置。</li></ul></li><li>outline 上面三个属性的连写。</li></ul><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">style</span>&gt;      <span class="hljs-selector-tag">p</span> &#123;          <span class="hljs-attribute">outline</span>: red dotted thick;          <span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;          <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;      &#125;  &lt;/style&gt;</code></pre><h4 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h4><p>box-shadow 属性设置盒子阴影。box-shadow 有四个值:</p><ul><li><p>第一个值是水平偏移量（水平阴影）：即向右的距离，阴影被从原始的框中偏移(如果值为负的话则为左)。</p></li><li><p>第二个值是垂直偏移量（垂直阴影）：即阴影从原始盒子中向下偏移的距离(或向上，如果值为负)。</p></li><li><p>第三个值是模糊半径（影子大小）：即在阴影中应用的模糊度。</p></li><li><p>第四个值是阴影的基本颜色。你可以使用任何长度和颜色单位来定义这些值。</p><p>box-shadow: 5px 5px 5px red;</p></li></ul><p>使用 inset 关键字，把它放在一个影子声明的开始，使它变成一个内部阴影，而不是一个外部阴影。</p><p> box-shadow: inset 5px 5px 5px red;</p><h4 id="选择器分类"><a href="#选择器分类" class="headerlink" title="选择器分类"></a>选择器分类</h4><ul><li>基础选择器：标签选择器，类选择器，ID 选择器，通配符选择器</li><li>组合选择器：标签指定式选择器，后代选择器，并集选择器</li><li>属性选择器</li><li>伪类选择器</li></ul><h4 id="样式优先级"><a href="#样式优先级" class="headerlink" title="样式优先级"></a>样式优先级</h4><ul><li>优先级：<ul><li>规则（1）：行内样式 &gt; 页内样式 &gt; 外部引用样式 &gt; 浏览器默认样式。</li><li>规则（2）：important &gt; 内联 &gt; ID &gt; 伪类|类 | 属性选择 &gt; 标签 &gt; 伪对象 &gt; 通配符 &gt; 继承。另外权重会叠加，所以为了便于理解，权重设置如下：<ul><li>1 表示标签选择器的权重</li><li>10 表示类选择器的权重</li><li>100 表示 ID 选择器的权重</li><li>1000 表示内联样式的权重</li></ul></li></ul></li></ul><p>注：权重相同时，CSS 遵循就近原则。也就是说靠近元素的样式具有最大的优先级，或者说排在最后的样式优先级最大。所有都相同时，声明靠后的优先级大。</p><h4 id="CSS-排版"><a href="#CSS-排版" class="headerlink" title="CSS 排版"></a>CSS 排版</h4><h5 id="静态定位"><a href="#静态定位" class="headerlink" title="静态定位"></a>静态定位</h5><pre><code class="hljs css"><span class="hljs-selector-tag">position</span>：<span class="hljs-selector-tag">static</span>;</code></pre><p>静态定位是每个元素获取的默认值，所以我们基本上都不需要再单独设置它</p><h5 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h5><pre><code class="hljs css"><span class="hljs-selector-tag">position</span>：<span class="hljs-selector-tag">absolute</span>;</code></pre><p>绝对定位有以下特点：</p><ul><li>绝对定位以浏览器左上角为基准设置位置</li><li>当一个盒子包含在另一个盒子中，父盒子未设置定位，子盒子以浏览器左上角为基准设置位置； 当父盒子设置定位，子盒子以父盒子左上角为基准设置位置</li><li>绝对定位不占空间位置（类似于浮动）</li></ul><h5 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h5><pre><code class="hljs css"><span class="hljs-selector-tag">position</span>：<span class="hljs-selector-tag">relative</span>;</code></pre><p>相对定位有以下特点：</p><ul><li>相对定位以元素自身的位置为基准设置位置</li><li>相对定位要占空间位置</li><li>一般子元素设置绝对定位，父元素设置相对定位（子绝父相）</li></ul><h5 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h5><p>固定定位表现类似于绝对定位，只有一个主要区别：绝对定位固定元素是相对于 <html> 元素或其最近的定位祖先，而固定定位固定元素则是相对于浏览器视口本身。固定定位也不占空间位置，语法为：</p><pre><code class="hljs css"><span class="hljs-selector-tag">position</span>：<span class="hljs-selector-tag">fixed</span>;</code></pre><h5 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h5><p>z-index 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。用于处理当多个元素重叠的时候，哪些元素设置在其他元素的顶部。特别需要注意的是元素可拥有负的 z-index 属性值，属性值没有单位，只有数字。Z-index 仅能在定位元素上奏效（例如 position:absolute;）</p>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML基础-实验楼</title>
    <link href="/2020/10/03/HTML%E5%9F%BA%E7%A1%80-%E5%AE%9E%E9%AA%8C%E6%A5%BC/"/>
    <url>/2020/10/03/HTML%E5%9F%BA%E7%A1%80-%E5%AE%9E%E9%AA%8C%E6%A5%BC/</url>
    
    <content type="html"><![CDATA[<h4 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h4><p>HTTP/1.1 定义的请求方法有 8 种：GET、POST、PUT、DELETE、PATCH、HEAD、OPTIONS、TRACE。最常的两种是 GET 和 POST，如果是 RESTful 接口的话一般会用到 GET、POST、DELETE、PUT。</p><h4 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h4><ul><li>200 ：成功。</li><li>400 ：客户端请求有语法错误，服务器端不能理解。</li><li>401 ：该请求可能未经过授权。</li><li>403 ：服务器端收到该请求，但是拒绝为它提供服务，可能是没有权限等等。</li><li>404 ：该资源没找到。</li><li>500 ：服务器端发生了一个不可预知的错误。</li><li>503 ：服务器端当前还不能处理客户端的这个请求，可能过段时间之后才能恢复正常。</li></ul><h4 id="浏览器的访问过程具体是什么呢？"><a href="#浏览器的访问过程具体是什么呢？" class="headerlink" title="浏览器的访问过程具体是什么呢？"></a>浏览器的访问过程具体是什么呢？</h4><ol><li>首先浏览器请求 DNS 服务器，通过 DNS 获取相应的域名对应的 IP。</li><li>通过 IP 与目的主机建立 TCP 连接。</li><li>发送和接受数据（获取网页内容）。</li><li>断开 TCP 连接。</li></ol><h4 id="文件的上传与下载到底是怎么回事？-前端的各种处理方式："><a href="#文件的上传与下载到底是怎么回事？-前端的各种处理方式：" class="headerlink" title="文件的上传与下载到底是怎么回事？ 前端的各种处理方式："></a>文件的上传与下载到底是怎么回事？ 前端的各种处理方式：</h4><ul><li>传统 flash 上传</li><li>新增 iframe 框 ajax 上传</li><li>表单数据提交</li><li>HTML5 的新工具——File API</li></ul><h4 id="iframe-框-Ajax-上传和表单数据提交："><a href="#iframe-框-Ajax-上传和表单数据提交：" class="headerlink" title="iframe 框 Ajax 上传和表单数据提交："></a>iframe 框 Ajax 上传和表单数据提交：</h4><ul><li>iframe 框上传：通过新建一个隐藏的 iframe 框，把数据放到这个 iframe 框架里，然后把它提交到服务器端处理，服务器返回的信息也是由 iframe 框调用父框架的方法处理。</li><li>表单数据提交：重点有两个，一个是 FormData 的数据对象，一个是 level2 的 XMLHttpRequest 对象。</li></ul><h4 id="有序列表（ol）"><a href="#有序列表（ol）" class="headerlink" title="有序列表（ol）"></a>有序列表（ol）</h4><p>定义：有序列表是一列项目，列表项目使用数字进行标记。有序列表始于<ol> 标签。每个列表项始于 <li> 标签。</p><ul><li>有序列表有 type 和 start 属性。</li><li>语法格式：</li></ul><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span>=<span class="hljs-string">value1</span> <span class="hljs-attr">start</span>=<span class="hljs-string">value2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></code></pre><p>注：value1 表示有序列表项目符号的类型, value2 表示项目开始的数值。</p><table><thead><tr><th>type类型</th><th>描述</th></tr></thead><tbody><tr><td>type=1</td><td>表示列表项目用数字表示（1，2，3…)</td></tr><tr><td>type=a</td><td>表示列表项目用小写字母表示（a,b,c…)</td></tr><tr><td>type=A</td><td>表示列表项目用大写字母表示（A,B,C…)</td></tr><tr><td>type=i</td><td>表示列表项目用小写罗马数字表示(i,ii,iii….)</td></tr><tr><td>type=I</td><td>表示列表项目用大写罗马数字表示(I,II,III…)</td></tr></tbody></table><h4 id="自定义列表（dl）"><a href="#自定义列表（dl）" class="headerlink" title="自定义列表（dl）"></a>自定义列表（dl）</h4><p>定义：自定义列表不仅仅是一列项目，而是项目及其注释的组合。自定义列表以<dl> 标签开始。每个自定义列表项以 <dt> 开始。每个自定义列表项的定义以 <dd> 开始。自定义列表的列表项前没有任何项目符号。</p><p>语法格式：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>名词1<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>名词1解释1<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span>    ...    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>名词2<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>名词2解释1<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span>    ...<span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span></code></pre><h4 id="HTML-元数据"><a href="#HTML-元数据" class="headerlink" title="HTML 元数据"></a>HTML 元数据</h4><meta>标签提供关于 HTML 文档的元数据：描述（description）、关键词（keywords）、文档的作者（author）等其他元数据。<h4 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h4><ul><li>标题：header</li><li>导航栏：nav</li><li>主要内容：main 具有代表性的内容段落主题可以使用 article   section，div元素。</li><li>侧栏：aside经常嵌套在main中</li><li>页脚：footer</li></ul><h4 id="表单基本标签"><a href="#表单基本标签" class="headerlink" title="表单基本标签"></a>表单基本标签</h4><p>表格的其他常用属性：</p><p>colspan  合并行</p><p>rowspan 和并列</p><p>caption 定义标题</p><ul><li><p>thead：用于定义表格的头部，一般包含网页的logo和导航等头部信息,位于table之中。</p></li><li><p>tfoot：用于定义表格的页脚，一般包含网页底部的企业信息，地址联系方式等，位于table标记之中，thead标记之后。</p></li><li><p>tbody：用于定义表格的主体，一般包含网页中除头部和底部之外的其他内容，位于table标记之中，tfoot标记之后。</p><h5 id="注：案例-：搜狐股票"><a href="#注：案例-：搜狐股票" class="headerlink" title="注：案例 ：搜狐股票"></a>注：案例 ：搜狐股票</h5></li></ul><h4 id="多媒体嵌入"><a href="#多媒体嵌入" class="headerlink" title="多媒体嵌入"></a>多媒体嵌入</h4><ul><li><p>video </p></li><li><p>audio </p></li><li><p>音频播放器所占用的空间比视频播放器要小，由于没有视觉部件，只需要显示出能控制音频播放的控件。它不支持 width/height 属性。</p></li><li><p>iframe </p></li></ul><h4 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h4><p>表单在网页中主要负责数据采集功能。一个表单有三个基本组成部分：</p><ul><li>表单标签：这里面包含了处理表单数据所用 CGI 程序的 URL 以及数据提交到服务器的方法。</li><li>表单域：包含了文本框、密码框、隐藏域、多行文本框、复选框、单选框、下拉选择框和文件上传框等。</li><li>表单按钮：包括提交按钮、复位按钮和一般按钮；用于将数据传送到服务器上的 CGI 脚本或者取消输入，还可以用表单按钮来控制其他定义了处理脚本的处理工作。</li></ul><p>fieldset 元素组合表单中的相关数据，legend 元素为 fieldset元素定义标题。</p><p>label 标签的 for 属性应当与相关元素的 id 属性相同，使得label 标签与 input 正确相关联。</p><p>原生表单组件，主要包含文本输入框、单行文本框、e-mail 输入框、密码输入框、搜索框、电话号码输入框、URL 输入框、多行文本框、下拉组件、可勾选组件、按钮。</p><h4 id="文本输入框"><a href="#文本输入框" class="headerlink" title="文本输入框"></a>文本输入框</h4><p>所有文本域的通用规范：</p><ul><li><p>它们可以被标记为 readonly (用户不能修改输入值)甚至是 disabled (输入值永远不会与表单数据的其余部分一起发送)。</p></li><li><p>它们可以有一个 placeholder; 这是文本输入框中出现的文本，用来简略描述输入框的目的。</p></li><li><p>它们都受 size (输入框的物理尺寸) 和 length (文本框可以输入的最大字符数)约束。</p></li><li><p>如果浏览器支持的话，可以进行拼写检查。</p><p>文本区域在右下角有一个拖放操作，允许用户调整它的大小。这种调整能力可以通过使用 CSS 设置文本区域的 resize 值为 none 来关闭。</p></li></ul><h4 id="下拉组件"><a href="#下拉组件" class="headerlink" title="下拉组件"></a>下拉组件</h4><p>自动补全组件:</p><p> 使用 datalist 元素来为表单小部件提供建议 的、自动完成的值，并使用一些 option 子元素来指定要显示的值。然后使用 list 属性将数据列表绑定到一个文本域(通常是一个 input元素)。</p>]]></content>
    
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
